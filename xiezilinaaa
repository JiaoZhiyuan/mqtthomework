app.py:


from flask import Flask, jsonify, render_template
from flask_mqtt import Mqtt
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)

# MQTT Configuration
app.config['MQTT_BROKER_URL'] = 'broker.hivemq.com'
app.config['MQTT_BROKER_PORT'] = 1883
app.config['MQTT_USERNAME'] = ''
app.config['MQTT_PASSWORD'] = ''
app.config['MQTT_KEEPALIVE'] = 60
app.config['MQTT_TLS_ENABLED'] = False

mqtt = Mqtt(app)

# Database Configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///health_data.db'
db = SQLAlchemy(app)

class HealthData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    topic = db.Column(db.String(50), nullable=False)
    payload = db.Column(db.String(200), nullable=False)

def init_data():
    test_data = [
        {'topic': 'health/monitor', 'payload': '{"heartbeat": 80, "pulse": 70, "blood_pressure": "120/80"}'},
        {'topic': 'health/monitor', 'payload': '{"heartbeat": 85, "pulse": 75, "blood_pressure": "122/82"}'},
        {'topic': 'health/monitor', 'payload': '{"heartbeat": 90, "pulse": 72, "blood_pressure": "125/85"}'}
    ]
    for data in test_data:
        health_data = HealthData(topic=data['topic'], payload=data['payload'])
        db.session.add(health_data)
    db.session.commit()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/data')
def get_data():
    data = HealthData.query.order_by(HealthData.timestamp.desc()).all()
    return jsonify([{
        'timestamp': data_item.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
        'topic': data_item.topic,
        'payload': data_item.payload
    } for data_item in data])

@mqtt.on_connect()
def handle_connect(client, userdata, flags, rc):
    mqtt.subscribe('health/#')

@mqtt.on_message()
def handle_mqtt_message(client, userdata, message):
    data = HealthData(topic=message.topic, payload=message.payload.decode())
    db.session.add(data)
    db.session.commit()

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        init_data()
    app.run(debug=True)


index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Health Monitoring Dashboard</title>
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>
    <header>
        <h1>Patient Health Monitoring System</h1>
    </header>
    <div id="dashboard">
        <h2>Realtime Data</h2>
        <div id="realtime-data"></div>
        <h2>Historical Data</h2>
        <div id="history-data"></div>
    </div>
    <script src="/static/js/script.js"></script>
</body>
</html>


script.js
document.addEventListener("DOMContentLoaded", function() {
    console.log("Page is fully loaded. Initializing data fetch...");

    fetchData();

    setInterval(fetchData, 5000); // Fetch data every 5 seconds

    function fetchData() {
        console.log("Fetching data from server...");

        fetch('/data')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                console.log("Data fetched successfully.");
                return response.json();
            })
            .then(data => {
                console.log("Data received:", data);
                if (data.length === 0) {
                    console.warn("No data received from server.");
                }
                displayData(data);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    }

    function displayData(data) {
        console.log("Displaying data on the page...");

        const realtimeDataContainer = document.getElementById('realtime-data');
        const historyDataContainer = document.getElementById('history-data');

        realtimeDataContainer.innerHTML = '';
        historyDataContainer.innerHTML = '';

        data.forEach((item, index) => {
            const dataElement = document.createElement('div');
            dataElement.textContent = `时间: ${item.timestamp}, 主题: ${item.topic}, 数据: ${item.payload}`;

            if (index === 0) {
                console.log("Adding data to realtime container:", dataElement.textContent);
                realtimeDataContainer.appendChild(dataElement);
            } else {
                console.log("Adding data to history container:", dataElement.textContent);
                historyDataContainer.appendChild(dataElement);
            }
        });

        console.log("Data displayed successfully.");
    }
});

style.css
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

header {
    background-color: #282c34;
    color: white;
    padding: 10px 0;
    text-align: center;
}

#dashboard {
    padding: 20px;
}

#realtime-data, #history-data {
    margin: 20px 0;
    padding: 20px;
    border: 1px solid #ccc;
    background-color: #fff;
}

